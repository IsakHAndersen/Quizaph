@inject NavigationManager navigation
@page "/Login"
@layout EmptyLayout

<MudPaper Square="true" style="background-color: transparent;" Elevation="0">
    <MudButton StartIcon=@Icons.Material.Filled.ArrowBack Color="Color.Dark" Variant="Variant.Filled" Style="text-transform: none; margin-left: 30px;" OnClick="@NavigateToMainPage">
        Back
    </MudButton>
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper MaxHeight="40%" Width="100%" Square="true" style="background-color: #ffffff; border-radius: 20px; padding: 30px 40px 30px 40px;">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5" Style="font-weight: 500; align-self: center; margin-bottom: 10px;"> Sign in to Quizaph </MudText>
                <MudTextField @bind-Value="loginRequestObject.Email" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                <MudTextField @bind-Value="loginRequestObject.Password" InputType="@PasswordInput" Label="Password" 
                Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" 
                AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" 
                AdornmentAriaLabel="Show Password"></MudTextField>
                <MudButton Style="width: 120px; align-self: center" Color="Color.Primary" OnClick="@SignIn"
                           Variant="Variant.Text">
                    Continue
                </MudButton>
                <MudDivider DividerType="DividerType.Middle" Class="my-1" />
                <MudText Style="align-self: center"> Or continue with </MudText>
                <MudDivider DividerType="DividerType.Middle" Class="my-1" />
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center" Style="margin-left: 5px;">
                    <MudText> Remember me? </MudText>
                    <MudCheckBox @bind-Value="loginRequestObject.RememberMe" Color="Color.Primary" UncheckedColor="Color.Default" Dense></MudCheckBox>
                </MudStack>
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center" Style="align-self:center;">
                    <MudButton Style="align-self: center; color: black; text-transform: none;" OnClick="@SignUp"
                               Variant="Variant.Text">
                            Not a user? Sign Up
                    </MudButton>
                </MudStack>
                @if (ShowAlertFlag)
                {
                    <MudAlert Severity="@AlertSeverity" Elevation="0" Dense="true">
                        @AlertMessage
                    </MudAlert>
                }
            </MudStack>
           
        </MudPaper>
    </MudContainer>
</MudPaper>

@code {

    #region AlertFunctionality
    bool ShowAlertFlag = false;
    Severity AlertSeverity = Severity.Normal;
    string AlertMessage = "";

    private async void ShowAlert(Severity severity, string message)
    {
        AlertSeverity = severity;
        AlertMessage = message;
        ShowAlertFlag = true;
        await Task.Delay(3000);
        ShowAlertFlag = false;
    }
    #endregion

    private LoginRequestObject loginRequestObject { get; set; } = new LoginRequestObject();
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
    }

    private class LoginRequestObject
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; } = false;
    }


    private void NavigateToMainPage()
    {
        navigation.NavigateTo("/");
    }

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void SignUp()
    {
        navigation.NavigateTo("SignUp");
    }

    private void SignIn()
    {
        var loginResult = false;
        if (!loginResult)
        {
            ShowAlert(Severity.Error, "Invalid login. Try again.");
        }
    }
}

@page "/SignUp"
@layout EmptyLayout
@inject NavigationManager navigation
@inject IJSRuntime JS
@inject AuthService AuthService

<MudPaper Square="true" style="background-color: transparent;" Elevation="0">
    <MudButton StartIcon=@Icons.Material.Filled.ArrowBack Color="Color.Dark" Variant="Variant.Filled"
               Style="text-transform: none; margin-left: 30px;" OnClick="@NavigateToMainPage">
        Back
    </MudButton>
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper MaxHeight="40%" Width="100%" Square="true"
                  style="background-color: #ffffff; border-radius: 20px; padding: 30px 40px 30px 40px;">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5" Style="font-weight: 500; align-self: center; margin-bottom: 10px;">
                    Welcome To Quizaph
                </MudText>

                <!-- Email/Password Fields -->
                <MudTextField @bind-Value="registerRequestObject.Email" Label="Email"
                              Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="registerRequestObject.Password" InputType="@PasswordInput" Label="Password"
                              Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="registerRequestObject.ConfirmPassword" InputType="@PasswordInput"
                              Label="Confirm Password" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudButton Style="width: 120px; align-self: center" Color="Color.Primary" OnClick="@Register"
                           Variant="Variant.Text">
                    Continue
                </MudButton>

                <MudDivider DividerType="DividerType.Middle" Class="my-2" />

                <!-- Google Sign-In Button -->
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center" Style="align-self:center;">
                    <div id="gsi-button"></div>
                </MudStack>

                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                <!-- Remember Me -->
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center" Style="margin-left: 5px;">
                    <MudText>Remember me?</MudText>
                    <MudCheckBox @bind-Value="registerRequestObject.RememberMe" Color="Color.Primary"
                                 UncheckedColor="Color.Default" Dense />
                </MudStack>

                <!-- Already a user? -->
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center" Style="align-self:center;">
                    <MudButton Style="align-self: center; color: black; text-transform: none;" OnClick="@SignIn"
                               Variant="Variant.Text">
                        Already a user? Sign In
                    </MudButton>
                </MudStack>

                @if (ShowAlertFlag)
                {
                    <MudAlert Severity="@AlertSeverity" Elevation="0" Dense="true">
                        @AlertMessage
                    </MudAlert>
                }
            </MudStack>
        </MudPaper>
    </MudContainer>
</MudPaper>

@code {
    #region Alert
    bool ShowAlertFlag = false;
    Severity AlertSeverity = Severity.Normal;
    string AlertMessage = "";

    private async Task ShowAlertAsync(Severity severity, string message)
    {
        AlertSeverity = severity;
        AlertMessage = message;
        ShowAlertFlag = true;
        await Task.Delay(3000);
        ShowAlertFlag = false;
        StateHasChanged();
    }
    #endregion

    private RegisterRequestObject registerRequestObject { get; set; } = new RegisterRequestObject();
    InputType PasswordInput = InputType.Password;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Google Sign-In button via JSInterop
            await JS.InvokeVoidAsync("googleSignIn.initialize", "YOUR_GOOGLE_CLIENT_ID",
                DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task HandleGoogleCredential(string idToken)
    {
        await AuthService.LoginWithGoogleAsync(idToken);
        navigation.NavigateTo("/");
    }

    private class RegisterRequestObject
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public bool RememberMe { get; set; } = false;
    }

    private void NavigateToMainPage() => navigation.NavigateTo("/");
    private void SignIn() => navigation.NavigateTo("/Login");

    private async void Register()
    {
        if (!IsValidLoginRequest()) return;
        await ShowAlertAsync(Severity.Success,
            "A confirmation email has been sent. Please check your inbox to complete your registration.");
    }

    private bool IsValidLoginRequest()
    {
        if (!IsValidPassword(registerRequestObject.Password)) return false;
        if (!IsValidEmail(registerRequestObject.Email)) return false;
        if (registerRequestObject.Password != registerRequestObject.ConfirmPassword) return false;
        return true;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            _ = ShowAlertAsync(Severity.Error, "Email is required.");
            return false;
        }

        try
        {
            var _ = new System.Net.Mail.MailAddress(email);
            return true;
        }
        catch
        {
            _ = ShowAlertAsync(Severity.Error, "Invalid email format.");
            return false;
        }
    }

    private bool IsValidPassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            _ = ShowAlertAsync(Severity.Error, "Password cannot be empty.");
            return false;
        }

        if (password.Length < 8)
        {
            _ = ShowAlertAsync(Severity.Error, "Password cannot be less than 8 characters.");
            return false;
        }

        if (!System.Text.RegularExpressions.Regex.IsMatch(password, @"^[a-zA-Z0-9]+$"))
        {
            _ = ShowAlertAsync(Severity.Error, "Password cannot contain special characters.");
            return false;
        }

        return true;
    }
}

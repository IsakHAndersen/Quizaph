@inject NavigationManager navigation
@inject HttpService HttpService
@page "/Quizzes"
@using QuizaphFrontend.Services
@using global::Models.Enums
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject UserClaimsService UserClaimsService




<MudPaper Square="true" style="background-color: transparent;" Elevation="0" MaxHeight="100%">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudGrid>

            <!-- Left filter panel -->
            <MudItem xs="12" md="3">
                <MudPaper Outlined="true" Square="true"
                          style="background-color: #ffffff; border-radius: 20px; padding: 20px;">
                    <MudText Typo="Typo.h6" GutterBottom="true">Filters</MudText>
                    <MudDivider Class="my-2" />

                    <!-- Category -->
                    <MudSelect T="QuizCategory"
                               Label="Category"
                               @bind-Value="selectedCategory">
                        @foreach (QuizCategory category in Enum.GetValues(typeof(QuizCategory)))
                        {
                            <MudSelectItem Value="category">@category</MudSelectItem>
                        }
                    </MudSelect>

                    <!-- Sorting -->
                    <MudSelect T="string" Label="Sort by" @bind-Value="selectedSort">
                        <MudSelectItem Value="@("None")">None</MudSelectItem>
                        <MudSelectItem Value="@("MostPopular")">Most Popular</MudSelectItem>
                        <MudSelectItem Value="@("LeastPopular")">Least Popular</MudSelectItem>
                        <MudSelectItem Value="@("HighestRated")">High Rating</MudSelectItem>
                        <MudSelectItem Value="@("LowestRated")">Low Rating</MudSelectItem>
                    </MudSelect>


                    <!-- Players Range -->
                    <MudText Typo="Typo.subtitle2" Class="mt-4">Players (min - max)</MudText>
                    <MudStack Row="true" Spacing="2">
                        <MudNumericField Label="Min" @bind-Value="minPlayers" Variant="Variant.Outlined" />
                        <MudNumericField Label="Max" @bind-Value="maxPlayers" Variant="Variant.Outlined" />
                    </MudStack>

                    <!-- Completed toggle -->
                    <MudCheckBox @bind-Value="showOnlyUncompleted" Label="Show only uncompleted" Class="mt-4" Dense Color="Color.Tertiary" />

                    <!-- Apply button -->
                    <MudStack Justify="Justify.Center" Class="mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="ClearFilters">
                            Clear Filters
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyFilters">
                            Apply Filters
                        </MudButton>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Main content (quiz list) -->
            <MudItem xs="12" md="9">
                <MudPaper Width="100%" Square="true"
                          style="background-color: #ffffff; border-radius: 20px; padding: 50px 50px 30px 50px; max-height: 85vh; display: flex; flex-direction: column;"
                          Outlined=true>

                    <!-- Header + search -->
                    <MudStack Row="true" Style="align-items: center" Spacing="6">
                        <MudText Style="font-weight: 500">
                            Found (@(filteredQuizzesList?.Count() ?? 0)) Quizzes
                        </MudText>
                        <MudTextField Value="@search"
                                      Placeholder="Search for quiz"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      AdornmentColor="Color.Dark"
                                      Style="height: 40px;" />
                    </MudStack>

                    <!-- Scrollable quiz list -->
                    <MudPaper Elevation="0" Square="true"
                              Style="flex-grow: 1; overflow-y: auto; padding-bottom: 20px; margin: 20px 0;">
                        @if (visibleQuizzesList.Any())
                        {
                            @foreach (var item in visibleQuizzesList)
                            {
                                <QuizaphFrontend.Components.ChildComponents.QuizInfoLabelComponent QuizInfo="item" />
                            }
                        }
                        else
                        {
                            <MudText>No quizzes found.</MudText>
                        }
                    </MudPaper>

                    <!-- Load More button -->
                    @if (filteredQuizzesList != null && visibleQuizzesList.Count() < filteredQuizzesList.Count())
                    {
                        <MudStack Justify="Justify.Center" Style="margin-top: 10px;">
                            <MudButton Variant="Variant.Text" Style="color: black" OnClick="LoadMore">
                                Load More
                            </MudButton>
                        </MudStack>
                    }

                </MudPaper>
            </MudItem>

        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    // Filter states
    private string? selectedSort { get; set; } = "None";
    private int? minPlayers { get; set; }
    private int? maxPlayers { get; set; }
    private bool showOnlyUncompleted { get; set; }
    private List<QuizResult> QuizResults { get; set; } = new();
    private QuizCategory selectedCategory = QuizCategory.None;

    private int pageSize = 10;

    private List<QuizaphBackend.Models.Quiz> quizzes = new();
    private List<QuizaphBackend.Models.Quiz> filteredQuizzesList = new();
    private List<QuizaphBackend.Models.Quiz> visibleQuizzesList = new();

    private string search = string.Empty;

    private int? userId;

    protected override async Task OnInitializedAsync()
    {
        quizzes = await HttpService.GetAllQuizzes();
        userId = await UserClaimsService.GetUserIdAsync();
        await ApplyFilters(); // Populate filtered and visible quizzes


    }

    #region Filter logic
    private void LoadMore()
    {
        if (filteredQuizzesList == null || filteredQuizzesList.Count == 0) return;

        var nextItems = filteredQuizzesList
            .Skip(visibleQuizzesList.Count)
            .Take(pageSize)
            .ToList();

        visibleQuizzesList.AddRange(nextItems);
        StateHasChanged();
    }

    private async Task ApplyFilters()
    {
        if (quizzes == null) return;

        filteredQuizzesList = quizzes
            .Where(q =>
                (string.IsNullOrEmpty(search) || q.Title.Contains(search, StringComparison.OrdinalIgnoreCase)) &&
                (minPlayers == null || q.MinPlayers >= minPlayers) &&
                (maxPlayers == null || q.MaxPlayers <= maxPlayers) &&

                (selectedCategory == QuizCategory.None || q.QuizCategory == selectedCategory)
            )
            .ToList();

        if (!string.IsNullOrEmpty(selectedSort) && selectedSort != "None")
        {
            filteredQuizzesList = selectedSort switch
            {
                "MostPopular" => filteredQuizzesList.OrderByDescending(q => q.TimesTaken).ToList(),
                "LeastPopular" => filteredQuizzesList.OrderBy(q => q.TimesTaken).ToList(),
                "HighestRated" => filteredQuizzesList.OrderByDescending(q => q.StarRating).ToList(),
                "LowestRated" => filteredQuizzesList.OrderBy(q => q.StarRating).ToList(),
                _ => filteredQuizzesList
            };
        }

        if (showOnlyUncompleted)
        {
            if (!QuizResults.Any())
            {
                if (userId.HasValue)
                {
                    QuizResults = await HttpService.GetCompletedQuizzes(userId.Value);
                }
            }

            filteredQuizzesList = filteredQuizzesList
                .Where(quiz => !QuizResults
                    .Any(c => c.QuizType == quiz.QuizType && c.IsCompleted))
                .ToList();
        }
        visibleQuizzesList.Clear();
        LoadMore();
    }


    private async void ClearFilters()
    {
        search = string.Empty;
        minPlayers = null;
        maxPlayers = null;
        selectedSort = "None";
        selectedCategory = QuizCategory.None;
        showOnlyUncompleted = false;
        await ApplyFilters();
    }
    #endregion
}

@using QuizaphFrontend.Components.MudblazorDialogComponents
@using QuizaphFrontend.Models.Quizes
@using QuizaphFrontend.Services
@using global::Models.Enums
@inject IJSRuntime JS
@inject CurrentQuizStateService QuizState
@inject IDialogService DialogService
@inject HttpService HttpService
@inject UserClaimsService UserClaimsService
@inject NavigationManager navigation
@implements IDisposable

    <MudPaper Square="true" style="background-color: #ffffff; overflow: hidden; border-radius: 20px;" Elevation="0" id="container">
        <MudPaper 
                  Style="position: absolute; top: 15px; left: 20px; z-index: 1100; background-color: transparent;
                     padding: 8px 12px; border-radius: 8px; display: flex; gap: 12px; align-items: center; border-block: 0;"
                  Elevation="0">

            <MudButton OnClick="@TogglePanel"
                       Variant="Variant.Text"
                       Color="Color.Dark"
                       EndIcon="@toggleIcon"
                       Style="text-transform: none; max-width: 250px;">
                View Countries
            </MudButton>
        </MudPaper>

        @if (showPanel)
        {
            <MudExpansionPanels Style="position: absolute; top: 60px; margin: 20px; margin-right: 70px;" Dense>
                @foreach (var continentGroup in CountryQuizData.Countries.GroupBy(a => a.Continent))
                {
                    <MudExpansionPanel Text="@FormatContinentName(continentGroup.Key)" Icon="@Icons.Material.Filled.Public" Style="margin: 3px; elevation: 0;">
                        <MudStack Row="true" Spacing="0" Wrap="Wrap.Wrap">
                            @foreach (var country in continentGroup)
                            {
                                <MudText Style="@GetCountryStyle(country)">
                                    @(country.Guessed? country.CountryName: "•••••")
                                </MudText>
                            }
                        </MudStack>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        }
        <MudText Style="position: absolute; top: 15px; right: 20px; background-color: rgba(255, 255, 255, 0.8);
                        padding: 8px 12px; border-radius: 12px; font-weight: bold; font-size: 15px; font-family: 'Roboto Condensed';">
            @GuessedAnswers / @TotalAnswers
        </MudText>

    @if (SelectedMode == QuizMode.Timed)
    {
        <MudStack Style="position: absolute; margin-top: 15px; left: 50%; transform: translateX(-50%); background-color: rgba(255, 255, 255, 0.9); border-radius: 10px; padding: 10px;" Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudIconButton Icon="@((timerPaused ? Icons.Material.Filled.PlayArrow : Icons.Material.Filled.Pause))" style="padding: 0px;"
                           OnClick="TogglePause" />
            <MudText style="font-size: 15px; font-weight: bold;">
                @TimeSpan.FromSeconds(QuizTimer).ToString(@"mm\:ss")
            </MudText>
            <MudIcon Style="margin-left: 7px;" Icon="@Icons.Material.Filled.HourglassEmpty" />
        </MudStack>
    }
    @if (SelectedMode == QuizMode.RandomWithLives)
    {
        <MudStack Style="position: absolute; margin-top: 15px; left: 50%; transform: translateX(-50%); background-color: rgba(255, 255, 255, 0.9); border-radius: 10px; padding: 10px;" Row="true" AlignItems="AlignItems.Center" Spacing="3">

            @foreach (var life in quizLives)
            {
                <MudIcon 
                         Icon="@(life.IsLost ? Icons.Material.Filled.FavoriteBorder : Icons.Material.Filled.Favorite)"
                         Color="@(life.IsLost ? Color.Default : Color.Error)" />
            }
        </MudStack>
    }

        <div id="svg-zoom-container" style="width: 100%; height: 100%; overflow: hidden; touch-action: none;" @ref="_svgContainer">
                <object id="svg-map"
                        type="image/svg+xml"
                        data="SVGS/world_modified.svg"
                        style="width: 100%; height: 100%; max-height: 100%; cursor: move;">
                </object>
        </div>


        <!-- Zoom Buttons -->
        <div style="position: absolute; right: 16px; top: 50%; transform: translateY(-50%); display: flex; flex-direction: column; gap: 8px;">
            <MudFab Size="Size.Small" Color="Color.Primary" OnClick="@SvgZoomIn" Style="min-width: 36px; min-height: 36px; background: #3DD45C; opacity: 0.7;" EndIcon="@Icons.Material.Filled.Add">
            </MudFab>
            <MudFab Size="Size.Small" Color="Color.Primary" OnClick="@SvgZoomOut" Style="min-width: 36px; min-height: 36px; background: #C92447; opacity: 0.7;" EndIcon="@Icons.Material.Filled.Remove">
            </MudFab>
        </div>
        <MudTextField T="string"
                      @bind-Value="searchText"
                      Immediate="true"
                      Placeholder="Enter country"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Dark"
                      Style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%);
                         width: 300px; height: 40px; background-color: white;"
                      OnKeyUp="@OnSearchKeyUp"
                      @ref="_searchField" />
            <MudFab StartIcon="@(fullScreen? Icons.Material.Filled.FullscreenExit : Icons.Material.Filled.Fullscreen)"
                    Color="Color.Primary"
                    Style="position: absolute; bottom: 16px; right: 16px;"
                    Size="Size.Small"
                    OnClick="@ToggleFullScreen" />
    </MudPaper>

<script>
    const svgObject = document.getElementById('svg-map');

    svgObject.addEventListener('load', () => {
        const svgDoc = svgObject.contentDocument; // access inner SVG
        const countries = svgDoc.querySelectorAll('g'); // all <g> elements

        countries.forEach(country => {
            country.addEventListener('mouseenter', () => {
                country.style.fill = '#f00'; // hover color
            });
            country.addEventListener('mouseleave', () => {
                country.style.fill = ''; // reset to original
            });
        });
    });
</script>


@code {
    [CascadingParameter] private Quiz QuizInfo { get; set; } = default!;
    private QuizMode SelectedMode { get; set; } = QuizMode.Standard;
    private bool showPanel = false;
    private string toggleIcon => showPanel ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore;
    private int GuessedAnswers = 0;
    private int TotalAnswers;
    private CountryQuizData CountryQuizData { get; set; } = new CountryQuizData();
    private bool fullScreen = false;
    private ElementReference _svgContainer;
    private int QuizTimer = 900; // 15 minutes
    private bool timerPaused = false;
    private CancellationTokenSource? _timerCts;
    private DotNetObjectReference<CountriesOfTheWorldComponent>? objRef;

    private List<QuizLife> quizLives = new List<QuizLife>()
    {
        new QuizLife(), new QuizLife(), new QuizLife()
    };

    private MudTextField<string> _searchField;
    private string searchText = string.Empty;

    protected override void OnInitialized()
    {
        QuizState.OnResetRequested += Reset;
        QuizState.OnShowEndScreen += ShowEndScreen;
        QuizState.OnCurrentModeChanged += OnModeChanged;
        RetrieveQuizData();
        TotalAnswers = CountryQuizData.Countries.Count();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            await JS.InvokeVoidAsync("svgInterop.init", "svg-map");
            await JS.InvokeVoidAsync("registerSvgClickHandlers", objRef);
        }
    }


    [JSInvokable]
    public void OnCountryClicked(string countryId)
    {
        Console.WriteLine($"Clicked country: {countryId}");

        // call your quiz logic here
        SelectCountryAsAnswer(countryId);
    }

    private void SelectCountryAsAnswer(string country)
    {
        var life = quizLives.FirstOrDefault(l => !l.IsLost);
        if (life != null)
        {
            life.IsLost = true;
            life.NameOfError = "Wrong answer on France"; // example
        }
    }

    private void RetrieveQuizData()
    {
        CountryQuizData = StaticQuizDataRetrievalService.GetCountryQuizData();

        CountryQuizData.Countries = CountryQuizData.Countries
       .Where(c => !microNations.Contains(c.CountryName))
       .ToList();
    }

    private List<string> microNations = new List<string> { 
    "Vatican City", 
    "Monaco", 
    "San Marino", 
    "Liechtenstein", 
    "Andorra", 
    "Maldives",  
    "Nauru",
    "Tuvalu",
    "Palau",
    "Marshall Islands",
    "Micronesia",
    "Kiribati", 
    "Tonga",
    "Seychelles",
    };


    private async void StartTimer()
    {
        _timerCts = new CancellationTokenSource();
        var token = _timerCts.Token;
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        try
        {
            while (await timer.WaitForNextTickAsync(token))
            {
                if (!timerPaused && QuizTimer > 0)
                {
                    QuizTimer--;
                    await InvokeAsync(StateHasChanged);

                    if (QuizTimer == 0)
                    {
                        timerPaused = true;
                        await ShowEndScreen();
                    }
                }
            }
        }
        catch (OperationCanceledException)
        {
        }
    }


    private void TogglePause()
    {
        timerPaused = !timerPaused;
    }

    private void TogglePanel()
    {
        showPanel = !showPanel;
    }

    private async Task SvgZoomIn()
    {
        await JS.InvokeVoidAsync("svgInterop.zoomIn", "svg-map");
    }

    private async Task SvgZoomOut()
    {
        await JS.InvokeVoidAsync("svgInterop.zoomOut", "svg-map");
    }

    private async Task ToggleFullScreen()
    {
        fullScreen = !fullScreen;
        await JS.InvokeVoidAsync("toggleFullScreen", "container");
    }

    private string FormatContinentName(Continent continent)
    {
        return continent switch
        {
            Continent.NorthAmerica => "North America",
            Continent.SouthAmerica => "South America",
            _ => continent.ToString()
        };
    }

    private string GetCountryStyle(Country country)
    {
        var bgColor = country.Guessed ? "#81ef73" : "#f1f1f1";
        return $"white-space: nowrap; background-color: {bgColor}; padding: 4px 8px; border-radius: 4px; margin: 4px; margin-bottom: 12px;";
    }


    private async Task OnSearchKeyUp(KeyboardEventArgs args)
    {
        if (timerPaused) return;
        if (string.IsNullOrWhiteSpace(searchText)) return;

        var match = CountryQuizData.Countries
            .Where(c => !c.Guessed)
            .FirstOrDefault(c => c.ValidNames
                .Any(name => string.Equals(name, searchText, StringComparison.OrdinalIgnoreCase)));

        if (match != null)
        {
            match.Guessed = true;
            GuessedAnswers++;

            await JS.InvokeVoidAsync("highlightSvgElementById", match.Id);

            searchText = "";
            if (_searchField != null)
            {
                await _searchField.BlurAsync();
                await _searchField.SetText("");
                await _searchField.FocusAsync();
            }

            StateHasChanged();

            if (GuessedAnswers == TotalAnswers)
            {
                await ShowEndScreen();
            }
        }
    }




    public void Dispose()
    {
        QuizState.OnResetRequested -= Reset;
        QuizState.OnShowEndScreen -= ShowEndScreen;
        QuizState.OnCurrentModeChanged -= OnModeChanged;
        _timerCts?.Cancel();
    }



    public async Task Reset()
    {
        GuessedAnswers = 0;
        CountryQuizData.ResetQuiz();
        QuizTimer = 900;
        await JS.InvokeVoidAsync("resetSvg");
    }

    public async Task OnModeChanged(QuizMode mode)
    {
        SelectedMode = mode;
        if (SelectedMode == QuizMode.Timed)
        {
            StartTimer();
        }
        await Reset();
    }

    private async Task ShowEndScreen()
    {
        var result = new QuizResult
            {
                QuizType = QuizInfo.QuizType,
                QuizMode = SelectedMode,
                Score = GuessedAnswers,
                MaxScore = TotalAnswers,
            };


        var parameters = new DialogParameters
            {
                { nameof(EndScreenDialog.QuizResult), result },
            };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, CloseButton = true };
        var dialog = await DialogService.ShowAsync<EndScreenDialog>("", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null)
        {
            if (dialogResult.Canceled && dialogResult.Data?.ToString() == "retry")
            {
                await Reset();
            }
            if (dialogResult.Canceled && dialogResult.Data?.ToString() == "menu")
            {
                navigation.NavigateTo("Quizzes");
            }
        }
      
    }
}

@using QuizaphFrontend.Components.MudblazorDialogComponents
@using QuizaphFrontend.Models.Quizes
@using QuizaphFrontend.Services
@using global::Models.Enums
@inject IJSRuntime JS
@inject CurrentQuizStateService QuizState
@inject IDialogService DialogService
@inject HttpService HttpService
@inject UserClaimsService UserClaimsService
@implements IDisposable

    <MudPaper Square="true" style="background-color: #ffffff; overflow: hidden; border-radius: 20px;" Elevation="0" id="container">
        <MudPaper 
                  Style="position: absolute; top: 15px; left: 20px; z-index: 1100; background-color: transparent;
                     padding: 8px 12px; border-radius: 8px; display: flex; gap: 12px; align-items: center; border-block: 0;"
                  Elevation="0">

            <MudButton OnClick="@TogglePanel"
                       Variant="Variant.Text"
                       Color="Color.Dark"
                       EndIcon="@toggleIcon"
                       Style="text-transform: none; max-width: 250px;">
                View Countries
            </MudButton>
        </MudPaper>

        @if (showPanel)
        {
            <MudExpansionPanels Style="position: absolute; top: 60px; margin: 20px;" Dense>
                @foreach (var continentGroup in CountryQuizData.Countries.GroupBy(a => a.Continent))
                {
                    <MudExpansionPanel Text="@FormatContinentName(continentGroup.Key)" Icon="@Icons.Material.Filled.Public" Style="margin: 3px; elevation: 0;">
                        <MudStack Row="true" Spacing="0" Wrap="Wrap.Wrap">
                            @foreach (var country in continentGroup)
                            {
                                <MudText Style="@GetCountryStyle(country)">
                                    @(country.Guessed? country.CountryName: "•••••")
                                </MudText>
                            }
                        </MudStack>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        }
        <MudText Style="position: absolute; top: 15px; right: 20px; background-color: rgba(255, 255, 255, 0.8);
                        padding: 8px 12px; border-radius: 12px; font-weight: bold; font-size: 14px; font-family: 'Roboto Condensed';">
            @GuessedAnswers / @TotalAnswers
        </MudText>

    <div id="svg-zoom-container" style="width: 100%; height: 100%; overflow: hidden; touch-action: none;" @ref="_svgContainer">
            <object id="svg-map"
                    type="image/svg+xml"
                    data="SVGS/world_modified.svg"
                    style="width: 100%; height: 100%; max-height: 100%; cursor: move;">
            </object>
        </div>

    <!-- Zoom Buttons -->
    <div style="position: absolute; right: 16px; top: 50%; transform: translateY(-50%); display: flex; flex-direction: column; gap: 8px;">
        <MudFab Size="Size.Small" Color="Color.Primary" OnClick="@SvgZoomIn" Style="min-width: 36px; min-height: 36px; background: #3DD45C; opacity: 0.5;" EndIcon="@Icons.Material.Filled.Add">
        </MudFab>
        <MudFab Size="Size.Small" Color="Color.Primary" OnClick="@SvgZoomOut" Style="min-width: 36px; min-height: 36px; background: #C92447; opacity: 0.5;" EndIcon="@Icons.Material.Filled.Remove">
        </MudFab>
    </div>
        <MudTextField 
                      T="string"    
                      @ref=_searchField
                      OnKeyUp="CheckIfCountryExists"
                      Placeholder="Enter country"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Dark"
                      Style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%);
               width: 300px; height: 40px; background-color: white;"/>
        <MudFab StartIcon="@(fullScreen? Icons.Material.Filled.FullscreenExit : Icons.Material.Filled.Fullscreen)"
                Color="Color.Primary"
                Style="position: absolute; bottom: 16px; right: 16px;"
                Size="Size.Small"
                OnClick="@ToggleFullScreen" />
    </MudPaper>


@code {
    [CascadingParameter] private Quiz QuizInfo { get; set; } = default!;
    private QuizMode SelectedMode { get; set; } = QuizMode.Standard;
    private bool showPanel = false;
    private string toggleIcon => showPanel ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore;
    private int GuessedAnswers = 0;
    private int TotalAnswers;
    private CountryQuizData CountryQuizData { get; set; } = new CountryQuizData();
    private bool fullScreen = false;
    private MudTextField<string> _searchField = new MudTextField<string>();
    private ElementReference _svgContainer;

    protected override void OnInitialized()
    {
        QuizState.OnResetRequested += Reset;
        QuizState.OnShowEndScreen += ShowEndScreen;
        QuizState.OnCurrentModeChanged += OnModeChanged;
        RetrieveQuizData();
        TotalAnswers = CountryQuizData.Countries.Count();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            await JS.InvokeVoidAsync("enableSvgZoomPan", "svg-map");
        }
    }

    private void RetrieveQuizData()
    {
        CountryQuizData = StaticQuizDataRetrievalService.GetCountryQuizData();
    }

    private void TogglePanel()
    {
        showPanel = !showPanel;
    }

    private void SvgZoomIn()
    {

    }
    private void SvgZoomOut()
    {
        
    }

    private async Task ToggleFullScreen()
    {
        fullScreen = !fullScreen;
        await JS.InvokeVoidAsync("toggleFullScreen", "container");
    }

    private string FormatContinentName(Continent continent)
    {
        return continent switch
        {
            Continent.NorthAmerica => "North America",
            Continent.SouthAmerica => "South America",
            _ => continent.ToString()
        };
    }

    private string GetCountryStyle(Country country)
    {
        var bgColor = country.Guessed ? "#81ef73" : "#f1f1f1";
        return $"white-space: nowrap; background-color: {bgColor}; padding: 4px 8px; border-radius: 4px; margin: 4px; margin-bottom: 12px;";
    }

    private async Task CheckIfCountryExists()
    {
        var input = _searchField.Text;
        if (string.IsNullOrWhiteSpace(input)) return;
        var match = CountryQuizData.Countries.Where(a => !a.Guessed).FirstOrDefault(a => a.ValidNames.Any(guess => string.Equals(guess, input, StringComparison.OrdinalIgnoreCase)));
        if (match != null)
        {
            match.Guessed = true;
            await Task.FromResult(JS.InvokeVoidAsync("highlightSvgElementById", match.Id));
            GuessedAnswers++;
            await _searchField.SetText("");
            if (GuessedAnswers == TotalAnswers)
            {
                await ShowEndScreen();
            }
        }
    }

    public void Dispose()
    {
        QuizState.OnResetRequested -= Reset;
        QuizState.OnShowEndScreen -= ShowEndScreen;
        QuizState.OnCurrentModeChanged -= OnModeChanged;
    }



    public async Task Reset()
    {
        GuessedAnswers = 0;
        CountryQuizData.ResetQuiz();
        await JS.InvokeVoidAsync("resetSvg");
    }

    public async Task OnModeChanged(QuizMode mode)
    {
        SelectedMode = mode;
        await Reset();
    }

    private async Task ShowEndScreen()
    {
        var result = new QuizResult
            {
                QuizType = QuizInfo.QuizType,
                QuizMode = SelectedMode,
                Score = GuessedAnswers,
                MaxScore = TotalAnswers,
            };


        var parameters = new DialogParameters
            {
                { nameof(EndScreenDialog.QuizResult), result },
            };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, CloseButton = true };
        var dialog = await DialogService.ShowAsync<EndScreenDialog>("", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null)
        {
            if (dialogResult.Canceled && dialogResult.Data?.ToString() == "retry")
            {
                await Reset();
            }
        }
      
    }
}

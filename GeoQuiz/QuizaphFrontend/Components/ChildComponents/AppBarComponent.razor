@using Microsoft.AspNetCore.Components.Authorization
@using QuizaphFrontend.Services
@inject NavigationManager navigation
@inject UserClaimsService UserClaimsService
@inject AuthenticationStateProvider AuthStateProvider

<MudAppBar Fixed="true" Elevation="0"
           Style="background-color: #ffffff; color: #2C2C2E; height: 70px;">
    <MudContainer MaxWidth="MaxWidth.Large"
                  Class="d-flex justify-space-between align-center"
                  Style="height: 100%; padding: 0 16px;">

        <!-- Left side -->
        <div class="d-flex align-center">
            <img src="QuizImages/appbaricon.png" alt="Quizaph Logo" width="36" height="36" class="mr-2" />

            <MudText Class="quizaph-gradient"
                     Style="font-size: 24px; font-weight: 500; font-family: 'Roboto Condensed'; margin-right: 20px;">
                Quizaph
            </MudText>

            <!-- Desktop "Tabs" -->
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <div class="d-flex ml-4">
                    @foreach (var tab in tabs)
                    {
                        <MudButton Variant="Variant.Text"
                                   StartIcon="@tab.Icon"
                                   Class="@(currentRoute == tab.Route ? "nav-tab nav-tab-active" : "nav-tab")"
                                   OnClick="@(() => Navigate(tab.Route))"
                                   style="margin-left: 8px; margin-right: 8px; border-radius: 0px; font-weight: 400;">
                            @tab.Label
                        </MudButton>
                    }
                    @if (isPrivilegedUser)
                    {
                        <MudButton Variant="Variant.Text"
                                   Class="@(currentRoute == "/create-quiz" ? "nav-tab nav-tab-active" : "nav-tab")"
                                   OnClick="@(() => Navigate("/Create-quiz"))"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   IconColor="Color.Info"
                                   style="margin-left: 8px; margin-right: 8px; border-radius: 0px; font-weight: 400;">
                            Create Quiz
                        </MudButton>
                    }
                </div>
            </MudHidden>
            
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudMenu Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopLeft">
                    @foreach (var tab in tabs)
                    {
                        <MudMenuItem Icon="@tab.Icon" OnClick="@(() => Navigate(tab.Route))">
                            @tab.Label
                        </MudMenuItem>
                    }
                    @if (isPrivilegedUser)
                    {
                        <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="@(() => Navigate("/Create-quiz"))">
                            Create Quiz
                        </MudMenuItem>
                    }
                </MudMenu>
            </MudHidden>
        </div>


        <!-- Right side -->
        <div class="d-flex align-center">
            @if (!isLoggedIn)
            {
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudButton Variant="Variant.Text" OnClick="@SignIn" Style="text-transform: none; font-weight: 400;">Login</MudButton>
                    <MudButton OnClick="@SignUp" Variant="Variant.Filled"
                               Style="background-color: black; border-radius: 20px; color: #ebebeb; text-transform: none; font-weight: 400;">
                        Sign Up
                    </MudButton>
                </MudHidden>
            }
            else
            {
                <MudMenu Label="Profile" Variant="Variant.Text"
                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                         StartIcon="@Icons.Material.Filled.Person"
                         Color="Color.Inherit" Dense Class="profile-menu">
                    <MudMenuItem Icon="@Icons.Material.Filled.Person" Label="Profile Stats" />
                    <MudMenuItem Icon="@Icons.Material.Filled.Logout" Label="Logout" OnClick="Logout" />
                    <MudMenuItem Icon="@((isDarkMode) ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.NightsStay)" IconColor="@((isDarkMode) ? Color.Warning : Color.Dark)" )"
                                 Label="Dark Mode" OnClick="ToggleDarkMode" />
                </MudMenu>
            }
            @if (isLoggedIn)
            {
                <AuthorizeView>
                    <Authorized>
                        <div class="d-flex align-center ml-4">
                            <MudText Style="font-size: 14px; font-weight: 500; margin-right: 12px;">
                                @context.User.Identity.Name
                            </MudText>
                            <MudAvatar 
                                       Size="Size.Medium"
                                       Class="elevation-1">
                                <MudImage Src="@context.User.Claims.Where(p => p.Type == "picture").FirstOrDefault()?.Value"></MudImage>
                            </MudAvatar>
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
        </div>
    </MudContainer>
</MudAppBar>

<style>
    .quizaph-gradient {
        background: linear-gradient(90deg, blue, #455ADE, cyan);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        color: transparent;
    }

    .profile-menu .mud-button-label {
        font-weight: 350;
    }
    .nav-tab {
        display: flex;
        align-items: center;
        justify-content: center;
        text-transform: none;
        font-size: 14px;
        min-width: 80px;
        color: #2C2C2E;
        border-bottom: 2px solid transparent;
        padding: 6px 12px;
    }

    .nav-tab-active {
        font-weight: 600;
        border-bottom: 2px solid #455ADE;
        color: #455ADE !important;
    }
</style>

@code {
    private bool isDarkMode = false;
    private string currentRoute;
    private bool isPrivilegedUser;
    bool isLoggedIn = false;



    private List<(string Label, string Route, string Icon)> tabs = new()
    {
        ("Home", "/", Icons.Material.Filled.Home),
        ("Quizzes", "/Quizzes", Icons.Material.Filled.Apps),
    };

    protected override async Task OnInitializedAsync()
    {
        currentRoute = navigation.Uri.Replace(navigation.BaseUri, "/");

        // Check roles for privileged user
        var isAdmin = await UserClaimsService.IsInRoleAsync("Admin");
        var isMember = await UserClaimsService.IsInRoleAsync("Membership");
        isPrivilegedUser = isAdmin || isMember;

        // Check if user is authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isLoggedIn = user.Identity?.IsAuthenticated ?? false;
    }

    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += async (task) =>
        {
            var authState = await task;
            var user = authState.User;
            isLoggedIn = user.Identity?.IsAuthenticated ?? false;
            await InvokeAsync(StateHasChanged);
        };
    }

    private void Navigate(string route)
    {
        currentRoute = route;
        navigation.NavigateTo(route);
    }

    private void Logout()
    {
        // your logout logic
    }

    private void ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
    }

    private void SignIn()
    {
        navigation.NavigateTo("Login");
    }

    private void SignUp()
    {
        navigation.NavigateTo("SignUp");
    }
}

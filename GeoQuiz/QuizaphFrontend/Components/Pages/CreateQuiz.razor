@inject BackendClient HttpService
@page "/Create-quiz"
@using CommonModels.Enums
@using CommonModels.QuizCreationModels.QuizManual
@using CommonModels.QuizCreationModels.QuizPrompt
@using CommonModels.QuizModels
@using QuizaphFrontend.Services
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor

<MudPaper Square="true" Elevation="0" Class="pt-12" Style="background-color: #f5f6fa; min-height:100vh;">
    <MudContainer MaxWidth="MaxWidth.Large">


        <MudGrid Spacing="3">

            <!-- Left: Quiz Type Selector -->
            <MudItem xs="12" md="3">
                <MudPaper Outlined="true" Style="background-color:#ffffff; border-radius:20px; padding:20px; box-shadow:0px 4px 12px rgba(0,0,0,0.05);">
                    <MudSelect T="QuizType"
                               Label="Quiz Type"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Medium"
                               Dense
                               StartIcon="@Icons.Material.Filled.ListAlt"
                               @bind-Value="selectedQuizType">
                        @foreach (QuizType type in AvailableQuizTypes)
                        {
                            <MudSelectItem T="QuizType" Value="@type">
                                @HelperMethods.SplitByCamelCase(type.ToString())
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudPaper>
            </MudItem>

            <!-- Right: Quiz Form -->
            <MudItem xs="12" md="9">
                <MudPaper Style="background-color:#ffffff; border-radius:20px; padding:30px; box-shadow:0px 8px 24px rgba(0,0,0,0.08);">
                    <MudStack Spacing="4">
                        <!-- Quiz Info -->
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6" Style="font-weight:600; color:#3b3f5c;">
                            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-2" /> Create Quiz
                        </MudText>

                        <!-- Title -->
                        <MudTextField @bind-Value="QuizTitle" Variant="Variant.Outlined" Label="Quiz Title" Placeholder="Enter quiz title"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Title" />

                        <!-- Category -->
                        <MudSelect T="QuizCategory" @bind-Value="SelectedCategory" Label="Subject" Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Filled.Category">
                            @foreach (QuizCategory category in Enum.GetValues(typeof(QuizCategory)))
                            {
                                <MudSelectItem T="QuizCategory" Value="@category">@category.ToString()</MudSelectItem>
                            }
                        </MudSelect>

                        <!-- Mode -->
                        <MudSelect T="string" @bind-Value="ModeSelection" Label="Creation Mode" Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Filled.Mode">
                            @foreach (var mode in QuizCreationModes)
                            {
                                <MudSelectItem Value="@mode">@mode</MudSelectItem>
                            }
                        </MudSelect>

                        @if (ModeSelection == "Prompt")
                        {
                            <MudNumericField @bind-Value="PromptQuestionAmount"
                                             Variant="Variant.Outlined"
                                             Label="Number of Questions"
                                             Placeholder="Max 50"
                                             Adornment="Adornment.Start"
                                             AdornmentIcon="@Icons.Material.Filled.FormatListNumbered"
                                             Min="5" Max="50" />

                            <MudNumericField @bind-Value="PromptDifficulty"
                                             Variant="Variant.Outlined"
                                             Label="Difficulty"
                                             Placeholder="1-5"
                                             Adornment="Adornment.Start"
                                             AdornmentIcon="@Icons.Material.Filled.BarChart"
                                             Min="1" Max="5" />
                            <MudTextField @bind-Value="PromptContext" Variant="Variant.Outlined" Label="Quiz context" Placeholder="Describe the quiz you wish to create"
                                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Info" />
                        }
                        @if (ModeSelection == "Manual")
                        {
                            <MudText Typo="Typo.subtitle1" Class="mb-2" Style="font-weight:500;">
                                Enter Questions and Answers
                            </MudText>

                            <MudGrid Spacing="3">
                                @foreach (var question in ManualQuestions)
                                {
                                    <MudItem xs="12" md="6" Class="d-flex flex-column mb-4">
                                        <!-- Question -->
                                        <MudTextField T="string"
                                                      @bind-Value="question.Question"
                                                      Variant="Variant.Outlined"
                                                      Placeholder="Enter question"
                                                      Adornment="Adornment.Start"
                                                      AdornmentIcon="@Icons.Material.Filled.QuestionAnswer"
                                                      Clearable="true"
                                                      Class="mb-2" />

                                        <!-- Answers -->
                                        @for (int i = 0; i < question.CorrectAnswers.Count; i++)
                                        {
                                            var idx = i;
                                            <div class="d-flex align-center mb-2">
                                                <MudTextField T="string"
                                                              @bind-Value="question.CorrectAnswers[idx]"
                                                              Variant="Variant.Outlined"
                                                              Placeholder=@($"Answer {idx + 1}")
                                                              Adornment="Adornment.Start"
                                                              AdornmentIcon="@Icons.Material.Filled.CheckCircle"
                                                              Class="flex-grow-1" />

                                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                               Color="Color.Error"
                                                               OnClick="@(() => RemoveAnswer(question, idx))"
                                                               Style="margin-left: 8px;" />
                                            </div>
                                        }

                                        <MudButton Variant="Variant.Outlined"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   OnClick="@(() => AddAnswer(question))"
                                                   Class="mb-2">
                                            Add Answer
                                        </MudButton>

                                        <MudButton Variant="Variant.Text" Color="Color.Error"
                                                   StartIcon="@Icons.Material.Filled.Delete"
                                                   OnClick="@(() => RemoveQuestion(question))">
                                            Remove Question
                                        </MudButton>
                                    </MudItem>
                                }
                            </MudGrid>

                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                                       OnClick="AddQuestion" Class="mt-2">
                                Add Question
                            </MudButton>
                        }
                        <!-- Submit -->
                        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-4" StartIcon="@Icons.Material.Filled.CheckCircle" OnClick="SubmitQuizCreation">
                            Create Quiz
                        </MudButton>

                    </MudStack>
                </MudPaper>
            </MudItem>

        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    private QuizType selectedQuizType = QuizType.TriviaQuiz;
    private List<QuizType> AvailableQuizTypes = new() { QuizType.TriviaQuiz, QuizType.TrueFalseQuiz };
    private QuizCategory SelectedCategory { get; set; } = QuizCategory.GeneralKnowledge;
    private string QuizTitle { get; set; } = string.Empty;
    private List<string> QuizCreationModes = new() { "Prompt", "Manual" };
    private string ModeSelection { get; set; } = "Prompt";

    // Trivia Quiz Specific
    private int PromptQuestionAmount { get; set; } = 10;
    private int PromptDifficulty { get; set; } = 1;
    private string PromptContext { get; set; } = string.Empty;

    // Manual Quiz Specific
    private List<QuizQuestion> ManualQuestions { get; set; } = new();
    private string Description { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        if (!ManualQuestions.Any())
        {
            for (int i = 0; i < 5; i++)
                ManualQuestions.Add(new QuizQuestion { Question = "", CorrectAnswers = new List<string> { "" } });
        }
    }

    private void AddQuestion()
    {
        ManualQuestions.Add(new QuizQuestion { Question = "", CorrectAnswers = new List<string> { "" } });
    }

    private void RemoveQuestion(QuizQuestion question)
    {
        ManualQuestions.Remove(question);
    }

    private void AddAnswer(QuizQuestion question)
    {
        question.CorrectAnswers.Add("");
    }

    private void RemoveAnswer(QuizQuestion question, int index)
    {
        if (index >= 0 && index < question.CorrectAnswers.Count)
            question.CorrectAnswers.RemoveAt(index);
    }

    private async Task SubmitQuizCreation()
    {
        if (ModeSelection == "Manual")
        {
            var quiz = new CreateTriviaQuiz
            {
                QuizType = selectedQuizType,
                Title = QuizTitle,
                Category = SelectedCategory,
                Questions = ManualQuestions
            };
            await HttpService.CreateTriviaQuiz(quiz);
        }
        else if (ModeSelection == "Prompt")
        {
            var quiz = new CreateTriviaQuizPrompt
            {
                QuizType = selectedQuizType,
                Title = QuizTitle,
                Category = SelectedCategory,
                Difficulty = PromptDifficulty,
                NumberOfQuestions = PromptQuestionAmount,
                Instruction = PromptContext
            };
            await HttpService.CreateTriviaQuizPrompt(quiz);
        }
    }
}



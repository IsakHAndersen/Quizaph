@page "/SignUp"
@using QuizaphFrontend.Services
@layout EmptyLayout
@inject NavigationManager navigation
@inject HttpService HttpService
<MudPaper Square="true" style="background-color: transparent;" Elevation="0">
    <MudIconButton Icon=@Icons.Material.Filled.Home Color="Color.Primary" Variant="Variant.Filled"
                   Style="text-transform: none; margin-left: 20px; margin-bottom: 10px;" OnClick="@NavigateToMainPage">
    </MudIconButton>
    <MudContainer MaxWidth="MaxWidth.ExtraSmall">
        <MudPaper MaxHeight="40%" Width="100%" Square="true"
                  style="background-color: #ffffff; border-radius: 20px; padding: 30px 40px 30px 40px;">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5" Style="font-weight: 500; align-self: center; margin-bottom: 10px;">
                    Welcome To Quizaph
                </MudText>

                <!-- Email/Password Fields -->
                <MudTextField @bind-Value="registerRequestObject.Email" Label="Email"
                              Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="registerRequestObject.Password" InputType="@PasswordInput" Label="Password"
                              Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="registerRequestObject.ConfirmPassword" InputType="@PasswordInput"
                              Label="Confirm Password" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudButton Style="width: 120px; align-self: center" Color="Color.Primary" OnClick="@Register"
                           Variant="Variant.Text">
                    Continue
                </MudButton>

                <MudDivider DividerType="DividerType.Middle" Class="my-2" />

                <!-- Google Sign-In Button -->
                <MudStack Spacing="3" Row="true" AlignItems="AlignItems.Center" Style="align-self:center;">
                    <MudButton OnClick="@GoogleLogin"
                               Variant="Variant.Outlined"
                               Color="Color.Default"
                               Style="background-color: white;
                      border: 0px solid;
                      text-transform: none;
                      color: #3c4043;
                      font-weight: 500;
                      border-radius: 4px;
                      padding: 0 12px;
                      height: 40px;">

                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <!-- Google "G" logo -->
                            <img src="https://developers.google.com/identity/images/g-logo.png"
                                 alt="Google"
                                 style="width: 18px; height: 18px;" />

                            <!-- Button text -->
                            <span>Sign up with Google</span>
                        </MudStack>
                    </MudButton>
                </MudStack>

                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                <!-- Remember Me -->
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center" Style="margin-left: 5px;">
                    <MudText>Remember me?</MudText>
                    <MudCheckBox @bind-Value="registerRequestObject.RememberMe" Color="Color.Primary"
                                 UncheckedColor="Color.Default" Dense />
                </MudStack>

                <!-- Already a user? -->
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center" Style="align-self:center;">
                    <MudButton Style="align-self: center; color: black; text-transform: none;" OnClick="@SignIn"
                               Variant="Variant.Text">
                        Already a user? Sign In
                    </MudButton>
                </MudStack>

                @if (ShowAlertFlag)
                {
                    <MudAlert Severity="@AlertSeverity" Elevation="0" Dense="true">
                        @AlertMessage
                    </MudAlert>
                }
            </MudStack>
        </MudPaper>
    </MudContainer>
</MudPaper>

@code {
    #region Alert
    bool ShowAlertFlag = false;
    Severity AlertSeverity = Severity.Normal;
    string AlertMessage = "";

    private async Task ShowAlertAsync(Severity severity, string message)
    {
        AlertSeverity = severity;
        AlertMessage = message;
        ShowAlertFlag = true;
        await Task.Delay(3000);
        ShowAlertFlag = false;
        StateHasChanged();
    }
    #endregion

    private RegisterRequestObject registerRequestObject { get; set; } = new RegisterRequestObject();
    InputType PasswordInput = InputType.Password;

    private class RegisterRequestObject
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public bool RememberMe { get; set; } = false;
    }

    private void NavigateToMainPage() => navigation.NavigateTo("/");
    private void SignIn() => navigation.NavigateTo("/Login");

    private void GoogleLogin()
    {
        navigation.NavigateTo("auth/google-login", forceLoad: true);
    }

    private async void Register()
    {
        if (!IsValidLoginRequest()) return;

        var response = await HttpService.RegisterUser(
            registerRequestObject.Email,
            registerRequestObject.Password);

        if (response.IsSuccessStatusCode)
        {
            await ShowAlertAsync(Severity.Success,
                "A confirmation email has been sent. Please check your inbox.");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            await ShowAlertAsync(Severity.Error, $"Registration failed: {error}");
        }
    }



    private bool IsValidLoginRequest()
    {
        if (!IsValidPassword(registerRequestObject.Password)) return false;
        if (!IsValidEmail(registerRequestObject.Email)) return false;
        if (registerRequestObject.Password != registerRequestObject.ConfirmPassword) return false;
        return true;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            _ = ShowAlertAsync(Severity.Error, "Email is required.");
            return false;
        }

        try
        {
            var _ = new System.Net.Mail.MailAddress(email);
            return true;
        }
        catch
        {
            _ = ShowAlertAsync(Severity.Error, "Invalid email format.");
            return false;
        }
    }

    private bool IsValidPassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            _ = ShowAlertAsync(Severity.Error, "Password cannot be empty.");
            return false;
        }

        if (password.Length < 8)
        {
            _ = ShowAlertAsync(Severity.Error, "Password cannot be less than 8 characters.");
            return false;
        }

        if (!System.Text.RegularExpressions.Regex.IsMatch(password, @"^[a-zA-Z0-9]+$"))
        {
            _ = ShowAlertAsync(Severity.Error, "Password cannot contain special characters.");
            return false;
        }

        return true;
    }
}
